{"version":3,"file":"static/js/380.acb2bab6.chunk.js","mappings":"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","sources":["APIRequest/CategoryRequest.js","APIRequest/PostRequest.js","APIRequest/TagRequest.js","components/CreatePost/CreatePost.jsx","components/TagDropDown/TagDropDown.jsx"],"sourcesContent":["//Internal Import\r\nimport store from \"../redux/store/store\";\r\nimport ToastMessage from \"../helper/ToastMessage\";\r\nimport RestClient from \"./RestClient\";\r\nimport { SetCategory, SetCategoryList } from \"../redux/slices/CategorySlice\";\r\n\r\nclass CategoryRequest {\r\n  static async createCategoryRequest(postBody) {\r\n    const { data } = await RestClient.postRequest(\r\n      \"/category/createCategory\",\r\n      postBody,\r\n    );\r\n    if (data) {\r\n      ToastMessage.successMessage(data.message);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async selectAllCategoryRequest() {\r\n    const { data } = await RestClient.getRequest(\"/category/selectAllCategory\");\r\n\r\n    if (data) {\r\n      store.dispatch(SetCategoryList(data));\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async selectCategoryRequest(id) {\r\n    const { data } = await RestClient.getRequest(\r\n      \"category/selectCategory/\" + id,\r\n    );\r\n    if (data) {\r\n      store.dispatch(SetCategory(data?.[0]));\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async updateCategoryRequest({ id, postBody }) {\r\n    const { data } = await RestClient.updateRequest(\r\n      \"category/updateCategory/\" + id,\r\n      postBody,\r\n    );\r\n\r\n    if (data) {\r\n      ToastMessage.successMessage(data.message);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async deleteCategoryRequest(id) {\r\n    const { data } = await RestClient.deleteRequest(\r\n      \"category/deleteCategory/\" + id,\r\n    );\r\n\r\n    if (data) {\r\n      ToastMessage.successMessage(data.message);\r\n      return true;\r\n    }\r\n  }\r\n}\r\n\r\nexport default CategoryRequest;\r\n","//Internal Import\r\nimport store from \"../redux/store/store\";\r\nimport ToastMessage from \"../helper/ToastMessage\";\r\nimport RestClient from \"./RestClient\";\r\nimport { SetPost, SetPostList } from \"../redux/slices/PostSlice\";\r\n\r\nclass PostRequest {\r\n  static async createPostRequest(postBody) {\r\n    const { data } = await RestClient.postRequest(\"/post/createPost\", postBody);\r\n    if (data) {\r\n      ToastMessage.successMessage(data.message);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async selectAllPostRequest() {\r\n    const { data } = await RestClient.getRequest(\"/post/selectAllPost\");\r\n    if (data) {\r\n      store.dispatch(SetPostList(data));\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async selectPostRequestBySlug(slug) {\r\n    const { data } = await RestClient.getRequest(\r\n      \"post/selectPostBySlug/\" + slug,\r\n    );\r\n    if (data) {\r\n      store.dispatch(SetPost(data?.[0]));\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async selectPostRequest(id) {\r\n    const { data } = await RestClient.getRequest(\"post/selectPost/\" + id);\r\n\r\n    if (data) {\r\n      store.dispatch(SetPost(data?.[0]));\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async selectPostBySlug(slug) {\r\n    const { data } = await RestClient.getRequest(\r\n      \"post/selectPostBySlug/\" + slug,\r\n    );\r\n\r\n    if (data) {\r\n      store.dispatch(SetPost(data?.[0]));\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async updatePostRequest(id, postBody) {\r\n    const { data } = await RestClient.updateRequest(\r\n      \"Post/updatePost/\" + id,\r\n      postBody,\r\n    );\r\n    if (data) {\r\n      ToastMessage.successMessage(data.message);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async deletePostRequest(id) {\r\n    const { data } = await RestClient.deleteRequest(\"post/deletePost/\" + id);\r\n\r\n    if (data) {\r\n      ToastMessage.successMessage(data.message);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async likePostRequest(id) {\r\n    const { data } = await RestClient.putRequest(\"post/likePost/\" + id);\r\n\r\n    if (data) {\r\n      ToastMessage.successMessage(data.message);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async disLikePostRequest(id) {\r\n    const { data } = await RestClient.putRequest(\"post/disLikePost/\" + id);\r\n\r\n    if (data) {\r\n      ToastMessage.successMessage(data.message);\r\n      return true;\r\n    }\r\n  }\r\n}\r\n\r\nexport default PostRequest;\r\n","//Internal Import\r\nimport store from \"../redux/store/store\";\r\nimport ToastMessage from \"../helper/ToastMessage\";\r\nimport RestClient from \"./RestClient\";\r\nimport { SetTag, SetTagList } from \"../redux/slices/TagSlice\";\r\n\r\nclass TagRequest {\r\n  static async createTagRequest(postBody) {\r\n    const { data } = await RestClient.postRequest(\"/tag/createTag\", postBody);\r\n    if (data) {\r\n      ToastMessage.successMessage(data.message);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async selectAllTagRequest(postBody) {\r\n    const { data } = await RestClient.getRequest(\"/tag/selectAllTag\");\r\n    if (data) {\r\n      store.dispatch(SetTagList(data));\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async selectTagRequest(id) {\r\n    const { data } = await RestClient.getRequest(\"tag/selectTag/\" + id);\r\n    if (data) {\r\n      store.dispatch(SetTag(data?.[0]));\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async updateTagRequest({ id, postBody }) {\r\n    const { data } = await RestClient.updateRequest(\r\n      \"Tag/updateTag/\" + id,\r\n      postBody,\r\n    );\r\n    if (data) {\r\n      ToastMessage.successMessage(data.message);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async deleteTagRequest(id) {\r\n    const { data } = await RestClient.deleteRequest(\"tag/deleteTag/\" + id);\r\n    if (data) {\r\n      ToastMessage.successMessage(data.message);\r\n      return true;\r\n    }\r\n  }\r\n}\r\n\r\nexport default TagRequest;\r\n","//External Import\r\nimport { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useFormik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n//Internal Import\r\nimport PostRequest from \"../../APIRequest/PostRequest\";\r\nimport TagDropDown from \"../TagDropDown/TagDropDown\";\r\nimport CategoryRequest from \"../../APIRequest/CategoryRequest\";\r\n\r\nconst CreatePost = () => {\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    CategoryRequest.selectAllCategoryRequest();\r\n  }, []);\r\n\r\n  const { CategoryList } = useSelector((state) => state?.Category);\r\n\r\n  const postSchema = yup.object().shape({\r\n    title: yup.string().required(\"Post Title is required\"),\r\n    categoryId: yup.string().required(\"Post Category Name is required\"),\r\n    description: yup.string().required(\"Post Description is required\"),\r\n    postThumbnail: yup.string().required(\"Post Post Thumbnail is required\"),\r\n  });\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      title: \"\",\r\n      categoryId: \"630d87a5a13dc87e5ed9e29c\",\r\n      description: \"\",\r\n      postThumbnail: \"\",\r\n      tagsId: \"\",\r\n    },\r\n    validationSchema: postSchema,\r\n    onSubmit: (values) => {\r\n      let formData = new FormData();\r\n      formData.append(\"title\", values?.title);\r\n      formData.append(\"categoryId\", values?.categoryId);\r\n      formData.append(\"description\", values?.description);\r\n      formData.append(\"postThumbnail\", values?.postThumbnail);\r\n      formData.append(\"tagsId\", values?.tagsId);\r\n\r\n      PostRequest.createPostRequest(formData).then((result) => {\r\n        navigate(\"/posts\");\r\n      });\r\n    },\r\n  });\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-900 flex flex-col justify-center py-12 sm:px-6 lg:px-8\">\r\n      <div className=\"sm:mx-auto sm:w-full sm:max-w-md\">\r\n        <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-300\">\r\n          Create Post\r\n        </h2>\r\n\r\n        <p className=\"mt-2 text-center text-sm text-gray-600\">\r\n          <p className=\"font-medium text-green-600 hover:text-indigo-500\">\r\n            Share your ideas to the word. Your post must be free from profanity\r\n          </p>\r\n        </p>\r\n      </div>\r\n      <div className=\"mt-8 sm:mx-auto sm:w-full sm:max-w-md\">\r\n        <div className=\"bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10\">\r\n          <form onSubmit={formik.handleSubmit} className=\"space-y-6\">\r\n            <div>\r\n              <label\r\n                htmlFor=\"title\"\r\n                className=\"block text-sm font-medium text-gray-700\"\r\n              >\r\n                Title\r\n              </label>\r\n              <div className=\"mt-1\">\r\n                <input\r\n                  id=\"title\"\r\n                  className=\"appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\r\n                  value={formik.values.title}\r\n                  onChange={formik.handleChange(\"title\")}\r\n                  onBlur={formik.handleBlur(\"title\")}\r\n                />\r\n              </div>\r\n              <div className=\"text-red-500\">\r\n                {formik.touched.title && formik.errors.title}\r\n              </div>\r\n            </div>\r\n            <label\r\n              htmlFor=\"caregory\"\r\n              className=\"block text-sm font-medium text-gray-700\"\r\n            >\r\n              Select Category\r\n            </label>\r\n\r\n            <select\r\n              className=\"appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\r\n              name=\"categoryId\"\r\n              value={formik.values.categoryId}\r\n              onChange={formik.handleChange(\"categoryId\")}\r\n              onBlur={formik.handleBlur(\"categoryId\")}\r\n              autoFocus\r\n            >\r\n              {CategoryList &&\r\n                CategoryList.map((category) => {\r\n                  return <option value={category._id}>{category.name}</option>;\r\n                })}\r\n            </select>\r\n            <div className=\"text-red-500\">\r\n              {formik.touched.category && formik.errors.category}\r\n            </div>\r\n\r\n            <TagDropDown\r\n              onChange={formik.setFieldValue}\r\n              onBlur={formik.setFieldTouched}\r\n            />\r\n\r\n            <div>\r\n              <label\r\n                htmlFor=\"description\"\r\n                className=\"block text-sm font-medium text-gray-700\"\r\n              >\r\n                Description\r\n              </label>\r\n              <textarea\r\n                id=\"description\"\r\n                rows=\"5\"\r\n                cols=\"10\"\r\n                className=\"rounded-lg appearance-none block w-full py-3 px-3 text-base text-center leading-tight text-gray-600 bg-transparent focus:bg-transparent  border border-gray-200 focus:border-gray-500  focus:outline-none\"\r\n                value={formik.values.description}\r\n                onChange={formik.handleChange(\"description\")}\r\n                onBlur={formik.handleBlur(\"description\")}\r\n              ></textarea>\r\n\r\n              <div className=\"text-red-500\">\r\n                {formik.touched.description && formik.errors.description}\r\n              </div>\r\n              <label\r\n                htmlFor=\"postThumbnail\"\r\n                className=\"block text-sm font-medium mt-3 mb-2 text-gray-700\"\r\n              >\r\n                Select image to upload\r\n              </label>\r\n\r\n              <input\r\n                type=\"file\"\r\n                className=\"appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\r\n                name=\"postThumbnail\"\r\n                accept=\"image/*\"\r\n                onChange={(event) => {\r\n                  formik.setFieldValue(\r\n                    \"postThumbnail\",\r\n                    event.currentTarget.files[0],\r\n                  );\r\n                }}\r\n              />\r\n\r\n              <div className=\"text-red-500\">\r\n                {formik.touched.postThumbnail && formik.errors.postThumbnail}\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <button\r\n                type=\"submit\"\r\n                className=\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\r\n              >\r\n                Create\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreatePost;\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Select from \"react-select\";\r\n\r\n//Internal Import\r\nimport TagRequest from \"../../APIRequest/TagRequest\";\r\n\r\nconst TagDropDown = (props) => {\r\n  useEffect(() => {\r\n    TagRequest.selectAllTagRequest();\r\n  }, []);\r\n\r\n  const { TagList } = useSelector((state) => state?.Tag);\r\n\r\n  const allTags =\r\n    TagList &&\r\n    TagList?.map((tag) => {\r\n      return {\r\n        label: tag?.name,\r\n        value: tag?._id,\r\n      };\r\n    });\r\n\r\n  const handleChange = (value) => {\r\n    const list = value.map((v) => {\r\n      return v.value;\r\n    });\r\n\r\n    props.onChange(\"tagsId\", list.toString());\r\n  };\r\n  const handleBlur = (value) => {\r\n    props.onBlur(\"tagsId\", true);\r\n  };\r\n\r\n  return (\r\n    <Select\r\n      isMulti\r\n      name=\"tagsId\"\r\n      id=\"tagsId\"\r\n      onChange={handleChange}\r\n      onBlur={handleBlur}\r\n      options={allTags}\r\n      defaultValue={[allTags[0], allTags[1]]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default TagDropDown;\r\n"],"names":["CategoryRequest","postBody","RestClient","data","ToastMessage","message","store","SetCategoryList","id","SetCategory","PostRequest","SetPostList","slug","SetPost","TagRequest","SetTagList","SetTag","navigate","useNavigate","useEffect","CategoryList","useSelector","state","Category","postSchema","yup","shape","title","required","categoryId","description","postThumbnail","formik","useFormik","initialValues","tagsId","validationSchema","onSubmit","values","formData","FormData","append","then","result","className","handleSubmit","htmlFor","value","onChange","handleChange","onBlur","handleBlur","touched","errors","name","autoFocus","map","category","_id","setFieldValue","setFieldTouched","rows","cols","type","accept","event","currentTarget","files","props","TagList","Tag","allTags","tag","label","isMulti","list","v","toString","options","defaultValue"],"sourceRoot":""}