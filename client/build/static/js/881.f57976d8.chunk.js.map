{"version":3,"file":"static/js/881.f57976d8.chunk.js","mappings":"yLAMMA,EAAAA,WAAAA,SAAAA,KAAAA,EAAAA,EAAAA,GAAAA,KAAAA,EAAAA,CAoCJ,OApCIA,EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,CAAAA,CAAAA,IAAAA,mBAAAA,MAAAA,WAAAA,IAAAA,GAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,KAAAA,MACJ,WAA8BC,GAA9B,8FACyBC,EAAAA,EAAAA,YAAuB,iBAAkBD,GADlE,qBACUE,EADV,EACUA,MADV,uBAGIC,EAAAA,EAAAA,eAA4BD,EAAKE,SAHrC,mBAIW,GAJX,8FADIL,IACJ,0EAQA,WAAiCC,GAAjC,8FACyBC,EAAAA,EAAAA,WAAsB,qBAD/C,qBACUC,EADV,EACUA,MADV,uBAGIG,EAAAA,EAAAA,UAAeC,EAAAA,EAAAA,IAAWJ,IAH9B,mBAIW,GAJX,8FARA,IAQA,uEAQA,WAA8BK,GAA9B,8FACyBN,EAAAA,EAAAA,WAAsB,iBAAmBM,GADlE,qBACUL,EADV,EACUA,MADV,uBAGIG,EAAAA,EAAAA,UAAeG,EAAAA,EAAAA,IAAM,OAACN,QAAD,IAACA,OAAD,EAACA,EAAO,KAHjC,mBAIW,GAJX,8FARA,IAQA,uEAQA,uGAAgCK,EAAhC,EAAgCA,GAAIP,EAApC,EAAoCA,SAApC,SACyBC,EAAAA,EAAAA,cACrB,iBAAmBM,EACnBP,GAHJ,qBACUE,EADV,EACUA,MADV,uBAMIC,EAAAA,EAAAA,eAA4BD,EAAKE,SANrC,mBAOW,GAPX,8FARA,IAQA,uEAWA,WAA8BG,GAA9B,8FACyBN,EAAAA,EAAAA,cAAyB,iBAAmBM,GADrE,qBACUL,EADV,EACUA,MADV,uBAGIC,EAAAA,EAAAA,eAA4BD,EAAKE,SAHrC,mBAIW,GAJX,8FAXA,MAWA,EApCIL,GA6CN,K,sGCwCA,UAjFe,WACb,IAAMU,GAAWC,EAAAA,EAAAA,MAEXC,EAAYC,EAAAA,KAAaC,MAAM,CACnCC,KAAMF,EAAAA,KAAaG,SAAS,0BAGxBC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbJ,KAAM,IAERK,iBAAkBR,EAClBS,SAAU,SAACC,GACTtB,EAAAA,EAAAA,iBAA4BsB,GAAQC,MAAK,SAACC,GACxCA,GAAUd,EAAS,YACpB,GACF,IAGH,OACE,+BACE,gBAAKe,UAAU,sFAAf,UACE,iBAAKA,UAAU,4BAAf,WACE,4BACE,SAAC,MAAD,CAAiBA,UAAU,yBAC3B,eAAIA,UAAU,yDAAd,0BAGA,cAAGA,UAAU,yCAAb,UACE,cAAGA,UAAU,oDAAb,kFAMJ,kBAAMA,UAAU,iBAAiBJ,SAAUJ,EAAOS,aAAlD,WACE,kBAAOC,KAAK,SAASZ,KAAK,WAAWa,aAAa,UAClD,gBAAKH,UAAU,mCAAf,UACE,4BACE,kBAAOI,QAAQ,gBAAgBJ,UAAU,UAAzC,mBAIA,kBACEK,MAAOb,EAAOK,OAAOP,KACrBgB,SAAUd,EAAOe,aAAa,QAC9BC,OAAQhB,EAAOiB,WAAW,QAC1BP,KAAK,OACLQ,aAAa,OACbV,UAAU,yOACVW,YAAY,aAEd,gBAAKX,UAAU,oBAAf,SACGR,EAAOoB,QAAQtB,MAAQE,EAAOqB,OAAOvB,aAK5C,0BACE,0BACE,oBACEY,KAAK,SACLF,UAAU,sOAFZ,WAIE,iBAAMA,UAAU,mDAAhB,UACE,SAAC,MAAD,CACEA,UAAU,sDACV,cAAY,WAPlB,8BAmBf,C","sources":["APIRequest/TagRequest.js","components/AddTag/AddTag.jsx"],"sourcesContent":["//Internal Import\r\nimport store from \"../redux/store/store\";\r\nimport ToastMessage from \"../helper/ToastMessage\";\r\nimport RestClient from \"./RestClient\";\r\nimport { SetTag, SetTagList } from \"../redux/slices/TagSlice\";\r\n\r\nclass TagRequest {\r\n  static async createTagRequest(postBody) {\r\n    const { data } = await RestClient.postRequest(\"/tag/createTag\", postBody);\r\n    if (data) {\r\n      ToastMessage.successMessage(data.message);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async selectAllTagRequest(postBody) {\r\n    const { data } = await RestClient.getRequest(\"/tag/selectAllTag\");\r\n    if (data) {\r\n      store.dispatch(SetTagList(data));\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async selectTagRequest(id) {\r\n    const { data } = await RestClient.getRequest(\"tag/selectTag/\" + id);\r\n    if (data) {\r\n      store.dispatch(SetTag(data?.[0]));\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async updateTagRequest({ id, postBody }) {\r\n    const { data } = await RestClient.updateRequest(\r\n      \"Tag/updateTag/\" + id,\r\n      postBody,\r\n    );\r\n    if (data) {\r\n      ToastMessage.successMessage(data.message);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  static async deleteTagRequest(id) {\r\n    const { data } = await RestClient.deleteRequest(\"tag/deleteTag/\" + id);\r\n    if (data) {\r\n      ToastMessage.successMessage(data.message);\r\n      return true;\r\n    }\r\n  }\r\n}\r\n\r\nexport default TagRequest;\r\n","//External import\r\nimport { AiOutlinePlus } from \"react-icons/ai\";\r\nimport { BsBookmarkCheck } from \"react-icons/bs\";\r\nimport { useFormik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n\r\n//Internal Imports\r\nimport TagRequest from \"../../APIRequest/TagRequest\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst AddTag = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const tagSchema = yup.object().shape({\r\n    name: yup.string().required(\"Tag Name is required\"),\r\n  });\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      name: \"\",\r\n    },\r\n    validationSchema: tagSchema,\r\n    onSubmit: (values) => {\r\n      TagRequest.createTagRequest(values).then((result) => {\r\n        result && navigate(\"/tag-list\");\r\n      });\r\n    },\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\r\n        <div className=\"max-w-md w-full space-y-8\">\r\n          <div>\r\n            <BsBookmarkCheck className=\"mx-auto h-12 w-auto\" />\r\n            <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\r\n              Add New tag\r\n            </h2>\r\n            <p className=\"mt-2 text-center text-sm text-gray-600\">\r\n              <p className=\"font-medium text-indigo-600 hover:text-indigo-500\">\r\n                These are the categories user will select when creating a post\r\n              </p>\r\n            </p>\r\n          </div>\r\n\r\n          <form className=\"mt-8 space-y-6\" onSubmit={formik.handleSubmit}>\r\n            <input type=\"hidden\" name=\"remember\" defaultValue=\"true\" />\r\n            <div className=\"rounded-md shadow-sm -space-y-px\">\r\n              <div>\r\n                <label htmlFor=\"email-address\" className=\"sr-only\">\r\n                  Name\r\n                </label>\r\n\r\n                <input\r\n                  value={formik.values.name}\r\n                  onChange={formik.handleChange(\"name\")}\r\n                  onBlur={formik.handleBlur(\"name\")}\r\n                  type=\"text\"\r\n                  autoComplete=\"text\"\r\n                  className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 text-center focus:z-10 sm:text-sm\"\r\n                  placeholder=\"New Tag\"\r\n                />\r\n                <div className=\"text-red-400 mb-2\">\r\n                  {formik.touched.name && formik.errors.name}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <div>\r\n                <button\r\n                  type=\"submit\"\r\n                  className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\r\n                >\r\n                  <span className=\"absolute left-0 inset-y-0 flex items-center pl-3\">\r\n                    <AiOutlinePlus\r\n                      className=\"h-5 w-5 text-yellow-500 group-hover:text-indigo-400\"\r\n                      aria-hidden=\"true\"\r\n                    />\r\n                  </span>\r\n                  Add new tag\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddTag;\r\n"],"names":["TagRequest","postBody","RestClient","data","ToastMessage","message","store","SetTagList","id","SetTag","navigate","useNavigate","tagSchema","yup","shape","name","required","formik","useFormik","initialValues","validationSchema","onSubmit","values","then","result","className","handleSubmit","type","defaultValue","htmlFor","value","onChange","handleChange","onBlur","handleBlur","autoComplete","placeholder","touched","errors"],"sourceRoot":""}